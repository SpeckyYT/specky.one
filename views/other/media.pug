include ../includes/style.pug
include ../includes/popup.pug
include ../includes/konami.pug

h1 Specky Media Hosting

if req.discord.powerLevel() == 0
    h2 You aren't logged in
    p #[a(href="/") Go back] and login with Discord to use this service

else
    h2 Your files

    div#file-grid.file-grid

    template#file-template
        div#file-item
            img#file-preview(src="" alt="File Preview")
            div#file-overlay
                p#file-name

    div#context-menu.hidden
        div#open.menu-item Open in browser
        div#copy.menu-item Copy link
        div#delete.menu-item.red-text Delete

    h2 Upload

    div#file-drop-area.center
        div#file-drop-message.
            Drag and drop a file here or #[a#file-input-label(style="") click to select a file]

        input#file-input.hidden(type="file")
    br
    input#send(type="button" value="Upload")

    if req.discord.powerLevel() >= 2
        div#users
        p#user-id
        div#user.file-grid

    template#user-button-template
        button(type="button")#user-button ID

style.
    /* upload */
    #file-drop-area {
        width: 60vw;
        height: 10vw;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #333;
        border: 2px dashed #999;
        cursor: pointer;
    }
    #file-input-label {
        cursor: pointer;
        text-decoration: underline;
    }
    #file-drop-area.dragging {
        background-color: #999;
        animation: drop-area-pulse 0.5s linear infinite alternate;
    }
    @keyframes drop-area-pulse {
        from {
            box-shadow: 0 0 10px #fff;
        }
        to {
            box-shadow: 0 0 20px #fff;
        }
    }

    /* file grid */
    .file-grid {
        background-color: #222;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        /* grid-auto-rows: 1fr; */
        grid-gap: 20px;
        padding: 20px;
    }
    #file-item {
        background-color: #444;
        position: relative;
        overflow: hidden;
        aspect-ratio : 1 / 1;
        max-width: 300px;
    }
    #file-preview {
        position: relative;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    #file-overlay {
        height: fit-content;
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: rgb(0, 0, 0);
        opacity: 0.7;
        padding: 5px;
        font-size: 100%;
        text-align: center;
        transition: opacity 0.2s ease-out;
    }
    #file-item:hover #file-overlay {
        opacity: 1;
    }
    #file-name {
        margin: 2px;
        word-wrap: break-word;
        position: relative;
        color: white;
    }

    /* right-click */
    #context-menu {
        position: absolute;
        background-color: white;
        padding: 10px;
        border: 3px solid #333;
        color: black;
        z-index: 1;
        white-space: nowrap;
        overflow: hidden;
        transform: scale(1);
        transition: transform 200ms ease-in-out;
    }
    #context-menu.hidden {
        display: block;
        transform: scale(0);
    }
    .menu-item {
        padding: 5px;
        cursor: pointer;
        transition: 300ms;
    }
    .menu-item:hover {
        background-color: #000;
        color: #fff;
    }
    .red-text {
        color: red;
    }
    .red-text:hover {
        background-color: #F00;
        color: #FFF;
    }
    .hidden {
        display: none;
    }

script.
    // upload
    const fileDropArea = document.querySelector('#file-drop-area');
    const saveButton = document.querySelector('#send');
    const fileInput = document.querySelector('#file-input');
    const fileTemplate = document.getElementById("file-template");

    fileDropArea.addEventListener("click", function(event) {
        fileInput.click();
    })

    fileInput.addEventListener("change", function(event) {
        popup(`File "${fileInput.files[0].name}" selected`, "info");
    });

    fileDropArea.addEventListener("dragover", function(event) {
        event.preventDefault();
        fileDropArea.classList.add("dragging");
    });
    fileDropArea.addEventListener("dragleave", function(event) {
        event.preventDefault();
        fileDropArea.classList.remove("dragging");
    });
    fileDropArea.addEventListener("drop", function(event) {
        event.preventDefault();
        fileDropArea.classList.remove("dragging");
        fileInput.files = event.dataTransfer.files;
        const changeEvent = new Event('change', { bubbles: true });
        fileInput.dispatchEvent(changeEvent);
    });

    // konami code
    let bypassSizeLimit = false;

    const output = setupKonamiCode(() => {
        popup("You enabled bigger file uploads (if you are a normal user, this won't do anything)", "success");
        bypassSizeLimit = true;
    })

    /* save */
    saveButton.addEventListener("click", async (event) => {
        event.preventDefault()

        const file = fileInput.files[0];

        if(!file)
            return popup("File not found")
    
        if(!bypassSizeLimit && file.size > 2**25)
            return popup("File is too big");
        
        if(file.size >= 2**32)
            return popup("What the fuck are you doing? ðŸ¤¨")

        const fileName = file.name.replace(/ +/g, "_").replace(/[^a-zA-Z0-9-_.]/g,"") || `${Date.now()}`;

        file.name = fileName;

        popup(`File "${getBasename(fileName)}" is getting sent!\nPlease wait until the file is uploaded.`, "info");

        const formData = new FormData();
        formData.append('file', file);

        await fetch('/media/files', {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if(response.ok) {
                popup(`File "${getBasename(fileName)}" saved successfully!`, "success")
            } else {
                if(response.status == 401)
                    popup(`Unauthorized, login via Discord to use this service`)
                else
                    popup(`Unknown error: ${response.status}`)
            }
        })
        .catch(error => {
            popup(`${error}`)
        });

        await updateFiles()
    });

    function getBasename(path) {
        return path.split("/").slice(-1).join("/")
    }

    function addMedia(grid, file) {
        // Clone the template
        let fileItem = fileTemplate.content.cloneNode(true);
        // Get the preview image and file name elements
        let preview = fileItem.getElementById("file-preview");
        let name = fileItem.getElementById("file-name");
        // Set the preview image src and file name text
        preview.src = `/preview/media/${file}`;
        preview.imageLink = `${window.location.origin}/media/${file}`;
        name.textContent = file.split("/").slice(-1);
        // Append the file item to the grid
        grid.appendChild(fileItem);
    }

    async function updateFiles() {
        const files = await fetch('/media/files').then(res => res.json());

        // Get the grid element and the file template
        const grid = document.getElementById("file-grid");

        // Clear the current grid
        grid.innerHTML = "";

        // Iterate through the files array
        for (const file of files) {
            addMedia(grid, file);
        }

        updateContextMenu("#file-grid #file-item")
    }

    updateFiles();

    // right-click
    let currentTarget = undefined;
    const contextMenu = document.querySelector("#context-menu");

    contextMenu.addEventListener("contextmenu", (e) => {
        e.preventDefault()
    })

    function updateContextMenu(selection) {
        const fileItems = document.querySelectorAll(selection);

        for (var i = 0; i < fileItems.length; i++) {
            fileItems[i].addEventListener("contextmenu", async function(e) {
                e.preventDefault();

                contextMenu.classList.add("hidden");
                await new Promise(res => setTimeout(res, 1));
                contextMenu.classList.remove("hidden");
                contextMenu.display = "block";
                contextMenu.style.left = e.clientX + window.pageXOffset + "px";
                contextMenu.style.top = e.clientY + window.pageYOffset + "px";

                currentTarget = e.target.closest("#file-item");

                // Check if context menu goes out of screen
                let menuWidth = contextMenu.offsetWidth;
                let menuHeight = contextMenu.offsetHeight;
                let screenWidth = document.body.clientWidth;
                let screenHeight = document.body.clientHeight;

                if (e.clientX + menuWidth > screenWidth) {
                    contextMenu.style.left = (screenWidth - menuWidth - 5) + "px";
                }
                if (e.clientY + menuHeight > screenHeight) {
                    contextMenu.style.top = (screenHeight - menuHeight - 5) + "px";
                }
            });
        }
    }

    function hideContextMenu(event) {
        if(event.target.id != "context-menu" && !contextMenu.classList.contains("hidden")) {
            contextMenu.classList.add("hidden");
        }
    }

    document.addEventListener("click", function(e) {
        hideContextMenu(e)
    });
    document.addEventListener("contextmenu", function(e) {
        hideContextMenu(e)
    });

    document.querySelector("#open").addEventListener("click", function(event) {
        if(!currentTarget) return;

        window.open(currentTarget.querySelector('img').imageLink, "_blank");

        popup("Opened in new window!", "info")
    });

    document.querySelector("#copy").addEventListener("click", function(event) {
        if(!currentTarget) return;

        return navigator.clipboard.writeText(currentTarget.querySelector('img').imageLink)
        .then(() => {
            popup("Copied to clipboard!", "info");
        })
        .catch(() => {
            popup("Failed to load to clipboard.");
        })
    });

    document.querySelector("#delete").addEventListener("click", function(event) {
        if(!currentTarget) return;

        const img = currentTarget.querySelector('img');
        const url = new URL(img.imageLink);
        const pathname = url.pathname;

        const actualPath = pathname.split(/\/|\\/g).slice(-2).join("/");

        return fetch(`/media/${actualPath}`, { method: "DELETE", })
        .then(async response => {
            if(response.ok) {
                popup(`File "${getBasename(actualPath)}" deleted successfully!`);
                await updateFiles();
            } else {
                popup(`Unknown error: ${response.status}`)
            }
        })
        .catch(async err => {
            popup(`${err}`);
            await updateFiles();
        })
    });

if req.discord.powerLevel() >= 2
    style.
        #users {
            padding: 40px 10px 20px 10px;
        }

    script.
        const usersDiv = document.querySelector("#users");
        const userButtonTemplate = document.querySelector("#user-button-template");
        const userDiv = document.querySelector("#user");

        function updateIDs() {
            return fetch("files/ids")
            .then(data => data.json())
            .then(ids => {
                usersDiv.innerHTML = ""
                for(const id of ids) {
                    const currentChild = userButtonTemplate.content.cloneNode(true);
                    currentChild.querySelector("button").innerHTML = id;
                    usersDiv.appendChild(currentChild);
                    usersDiv.children[usersDiv.children.length - 1].addEventListener("click", () => {
                        document.querySelector("#user-id").innerHTML = id
                        fetch(`files/${id}`)
                        .then(data => data.json())
                        .then(async files => {
                            userDiv.innerHTML = ""
                            for(const file of files) {
                                addMedia(userDiv, file)
                            }
                            updateContextMenu("#user #file-item")
                        })
                    })
                }
            });
        }

        updateIDs()
