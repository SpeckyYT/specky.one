doctype html

include ../includes/embed.pug

head
    title Dictionary
    +embed(
        "Dictionary",
        "Literally the entire dictionary (trust)",
        "https://specky.one/dictionary",
        "https://drsw10gc90t0z.cloudfront.net/AcuCustom/Sitename/DAM/544/Dictionary__Shutterstock1.jpg",
        "#4B0082",
    )

body
    h1 Dictionary
    span.
        guys please help me
    #overlay
    .messages

template#message_template
    .message
        .body
            img.avatar
            .messageText
                .messageInfo
                    span.username
                    span.timestamp
                .content
                    span.text
                    span.edited
        .messageReactions
        .reactionScreen
            .reactions
            .userEntries

template#reaction
    .reaction
        img.reaction-image
        span.reaction-count

template#userEntry
    .userEntry
        img.avatar
        span.username
    

script.
    const allUsers = new Map();

    let currentMessage = "";
    let lastChange = -1;
    function displayReactions(message, reaction) {
        const messageElement = document.querySelector(`div[data-message-id="${message}"]`);
        messageElement.querySelectorAll(`div[data-reaction="${reaction}"]`).forEach(e => e.setAttribute("active", "1"));
        messageElement.querySelectorAll(`.reaction, .users`).forEach(e => (e.getAttribute("data-reaction") != reaction && e.getAttribute("active") == "1") && e.setAttribute("active", "0"));
        messageElement.querySelector(".reactionScreen").style.visibility = "visible";
        document.getElementById("overlay").style.display = "block";
        currentMessage = message;
        lastChange = Date.now();
    };

    function hideReactions() {
        if (lastChange + 100 > Date.now()) return;
        const menu = document.querySelector(`div[data-message-id="${currentMessage}"] .reactionScreen`);
        if (menu.style.visibility == "hidden") return;
        menu.style.visibility = "hidden";
        document.getElementById("overlay").style.display = "none";
        currentMessage = null;
    };

    document.addEventListener("click", (ev) => {
        if (!ev.target?.parentElement?.classList?.contains("reactionScreen") && currentMessage) hideReactions();
    });

    (async function() {
        const dictionary = await fetch("/dictionary/dictionary1.json").then(j=>j.json());

        for(const message of dictionary) {
            const user = await fetchUser(message.author_id);

            const formattedDate = convertTimestamp(message.timestamp);
            const formattedEditDate = message.edit && convertTimestamp(message.edit)

            const template = document.getElementById('message_template').content.cloneNode(true);
            template.querySelector('.message').setAttribute("data-message-id", message.id);
            template.querySelector('img.avatar').src = user.assets.avatarURL || user.assets.defaultAvatarURL;
            template.querySelector('span.username').textContent = user.basicInfo.globalName || user.basicInfo.username;
            template.querySelector('span.timestamp').textContent = formattedDate;
            template.querySelector('span.text').textContent = message.content;
            const edited = template.querySelector('span.edited');
            edited.textContent = formattedEditDate && "(edited)";
            edited.title = formattedEditDate;

            for(const i in message.reactions) {
                const reaction = message.reactions[i];
                const reactions = document.getElementById('reaction').content.cloneNode(true);
                const reactionElement = reactions.querySelector('.reaction');
                reactionElement.setAttribute('data-reaction', reaction.emoji.code);
                reactionElement.oncontextmenu = (ev) => {
                    ev.preventDefault();
                    displayReactions(message.id, reaction.emoji.code);
                }
                reactionElement.onclick = (ev) => {
                    ev.preventDefault();
                    const reactionElement = ev.currentTarget;
                    reactionElement.classList.toggle('reaction-incremented');
                    const countElement = reactionElement.querySelector('span.reaction-count');
                    let count = parseInt(countElement.textContent, 10);
                    if(reactionElement.classList.contains('reaction-incremented')) {
                        count += 1;
                    } else {
                        count -= 1;
                    }
                    countElement.textContent = count;
                    // also update the count on the reaction page (I tried for a while but failed)
                    // and enable / disable the "you" reaction
                }
                reactions.querySelector('img.reaction-image').src = reaction.emoji.imageUrl;
                reactions.querySelector('span.reaction-count').textContent = reaction.count;
                template.querySelector('.messageReactions').appendChild(reactions);

                const clone = document.getElementById('reaction').content.cloneNode(true);
                clone.querySelector('img.reaction-image').src = reaction.emoji.imageUrl;
                clone.querySelector('span.reaction-count').textContent = reaction.count;

                clone.querySelector('.reaction').setAttribute("data-reaction", reaction.emoji.code);
                clone.querySelector('.reaction').setAttribute("active", i == "0" ? "1" : "0");
                clone.querySelector('.reaction').onclick = (() => {
                    displayReactions(message.id, reaction.emoji.code);
                })

                template.querySelector('.reactions').appendChild(clone);

                const users = document.createElement("div");
                users.classList.add("users");
                users.setAttribute("data-reaction", reaction.emoji.code);
                users.setAttribute("active", i == "0" ? "1" : "0");

                for (const userID of reaction.users) {
                    const user = await fetchUser(userID);
                    const userEntry = createReactionUserEntry(
                        user.basicInfo.globalName || user.basicInfo.username,
                        user.assets.avatarURL || user.assets.defaultAvatarURL,
                    );
                    users.appendChild(userEntry);
                }
                // // this sounds like a funny idea, no idea exactly how to implement it
                // const youEntry = createReactionUserEntry(
                //     "You",
                //     "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f921.svg",
                // );
                // youEntry.querySelector(".userEntry").classList.add("reaction-you");
                // users.appendChild(youEntry);

                template.querySelector('.userEntries').appendChild(users);
            }
            
            document.querySelector('div.messages').appendChild(template);
        }
    })();

    async function fetchUser(id) {
        if(allUsers.has(id)) {
            return allUsers.get(id)
        } else {
            for(let i = 0; i < 10; i++) {
                const user = await fetch(`https://discord-arts.asure.dev/v1/user/${id}`)
                    .then(j=>j.json())
                    .then(user => (allUsers.set(id, user.data), user.data) )
                    .catch(()=>{});
                if(user) return user;
            }
        }
    }

    function convertTimestamp(timestamp) {
        const date = new Date(timestamp);
        const options = { 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric', 
            hour: '2-digit', 
            minute: '2-digit', 
            hour12: false 
        };
        return date.toLocaleString(undefined, options).replace(',', '');
    }

    function createReactionUserEntry(username, avatar) {
        const userEntry = document.getElementById('userEntry').content.cloneNode(true);
        userEntry.querySelector('img.avatar').src = avatar;
        userEntry.querySelector('span.username').textContent = username;
        return userEntry
    }

style.
    body {
        background-color: #1e1e1e;
    }

    .message {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    .body {
        display: flex;
        height: 2.5em;
    }

    .messageInfo {
        height: 1.25em;
    }

    .timestamp {
        color: gray;
        font-size: 75%;
        font-weight: 500;
    }

    .avatar {
        border-radius: 50%;
        width: 2.5em;
        margin-right: 1em;
    }

    .username {
        font-weight: 500;
        color: lightgray;
        font-size: 100%;
        margin-right: .25em;
    }

    .content {
        height: 1em;
        margin-bottom: 0;
    }

    .text {
        color: white;
        font-size: 95%;
        font-weight: 300;
    }

    .edited {
        color: gray;
        font-size: 65%;
        font-weight: 300;
        margin-left: 0.375em;
    }

    .messageReactions {
        display: inline-grid;
        grid-auto-flow: column;
        gap: 0.375em;
        padding-left: 3.5em;
    }

    .reaction-image {
        height: 1em;
    }

    .reaction {
        height: 1em;
        border: .0625rem solid transparent;
        background-color: #171717;
        display: flex;
        align-items: center;
        margin-top: .5em;
        margin-bottom: .5em;
        border-radius: .5rem;
        padding: .25rem .375rem;
    }

    .reaction:hover:not(.reaction-incremented) {
        background-color: #2A2A2A;
        outline-style: solid;
        outline-width: 0.1em;
        outline-color: #585A5E;
    }

    .reaction-count {
        color: lightgray;
        font-weight: 600;
        margin-left: .375em;
        height: 100%;
        line-height: 1em;
        vertical-align: middle;
        text-align: center;
    }

    .reaction-incremented {
        background-color: #373A54;
        outline-style: solid;
        outline-width: 0.1em;
        outline-color: #4F59CD;
    }

    .reactionScreen {
        display: flex;
        height: 28em;
        width: 32em;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        visibility: hidden;
        z-index: 999;
    }

    .reactions {
        background-color: #171717;
        display: inline-flex;
        flex-direction: column;
        gap: 0.375em;
        padding: 0.5em;
    }

    .reactions .reaction[active="1"] {
        background-color: #090909;
        padding-right: 2.25em;
        grid-column: 1;
    }

    .reactions .reaction-image {
        height: 1.25em;
    }

    .reactions .reaction {
        padding: 0.5em;
        margin: 0;
    }

    .userEntries {
        display: flex;
        flex-grow: 1;
        flex-direction: column;
    }

    .userEntries .users[active="1"] {
        background-color: #1b1b1b;
        padding: 0.5em;
        height: 100%;
    }

    .userEntry {
        display: flex;
        height: 1.75em;
        align-items: center;
        margin-bottom: 0.375em;
    }

    .userEntry .avatar {
        width: 1.75em;
        margin-right: .65em;
        margin-left: .1em;
    }

    .userEntry .username {
        font-weight: 400;
        line-height: 1em;
        font-size: 1em;
        color: lightgray;
    }

    .userEntries .users[active="0"] {
        display: none;
    }

    #overlay {
        position: fixed;
        display: none;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 2;
    }

    .users hr {
        margin: 0.75em 0;
        border: none;
        height: 1px;
        background-color: #2A2A2A;
        
    }
